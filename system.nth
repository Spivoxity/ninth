: ' word [create] ;

: immediate 1 pick MEM + dup @ 0x10000 or swap ! ;
' immediate 0 immediate pop pop

: # immediate 10 dp @ scan pop ;
# Now we can write comments like this

# Stack manipulations
: -rot rot rot ;
: over 1 pick ;
: 2pop pop pop ;
: 2dup over over ;
: nip swap pop ;
: tuck dup rot rot ;

# Abbreviations
: invert -1 xor ;
: 1+ 1 + ;
: 1- 1 - ;
: 2/ 1 asr ;
: cell+ 4 + ;
: cell- 4 - ;
: space 32 putc ;
: aligned 1- tuck + swap invert and ;
: on 1 swap ! ;
: off 0 swap ! ;
: > swap < ;
: <= > not ;
: >= < not ;
: <> = not ;
: nl 10 putc ;

: xchg # Exchange between stack and memory
dup @ -rot ! ;

# Access to R-stack
# I like these definitions, but they are probably too slow
# : >r rp @ xchg rp @ cell- dup rp ! ! ;
# : r> rp @ @ rp @ cell+ dup rp ! xchg ;

# Quotations
: ['] immediate lit lit gentok ' gentok ;
: [compile] immediate ' gentok ;
: quote immediate [compile] ['] ['] gentok gentok ;

# Control structures
# THERE points into the ROM space if bootstrapping
: there tp @ ;

: >mark there 0 gentok ;
: >resolve there over - 2/ 1- swap tok! ;

: <mark there ;
: <resolve there - 2/ 1- gentok ;

: if immediate ?comp quote branch0 >mark 31415 ;
: else immediate 31415 ?tag quote branch >mark swap >resolve 31415 ;
: fi immediate 31415 ?tag >resolve ;

: ?dup dup if dup fi ;

: do immediate ?comp <mark 0 27183 ;
: while immediate 27183 ?tag pop quote branch0 >mark 27183 ;
: od immediate 27183 ?tag swap quote branch <resolve ?dup if >resolve fi ;

: dump depth do ?dup while dup pick . 1- od nl ;
: clear do depth while pop od ;

# Storage allocation

# HERE points into the RAM space
: here dp @ ;
: , here dup cell+ dp ! ! ;
: constant word [create] CONST here defword , ;
: variable word [create] VAR here defword ;
: allot here + 4 aligned dp ! ;

# Strings
: char word ch@ ;
: [char] immediate ?comp quote lit char gentok ;
: strlen dup do dup ch@ while 1+ od swap - ;
: putstr do dup ch@ dup while putc 1+ od 2pop ;
: litstr r> dup 2 + swap tok@ over + >r ;

: " immediate
?comp quote litstr 0 gentok [char] " there scan 
strlen 1+ 2 aligned dup there 2 - tok! there + tp ! ;

: ." immediate [compile] " quote putstr ;


# Dictionary layout
: def>next MEM + tok@ ;
: def>exec MEM + 4 + @ ;
: def>data MEM + 8 + @ ;
: def>name MEM + 12 + ;

: names 
dict @ do dup 0 >= while dup space def>name putstr def>next od pop nl ;


# Disassembler
: isword # Test if token is in the dictionary
dict @ do dup 0 >= while 2dup = if 2pop 1 exit fi def>next od 2pop 0 ;

: disword dup isword if space def>name putstr else . fi ;

: disbody do dup tok@ dup disword ['] exit <> while 2 + od nl pop ;

: dis # Disassemble up to exit token
word find if
  dup def>exec ENTER = if
    def>data disbody
  else
    def>name putstr space ." is not a secondary" nl
  fi
else
  putstr space ." is unknown" nl
fi ;


# Top level support

: unknown # Unknown word in outer interpreter
putstr space ." is undefined" nl quit ;

: reset # Delete any half-complete definition
base @ if base @ dp ! fi quit ;

: ?comp # Called from compile-only words
state @ not if ." Compile-only word" nl quit fi ;

: ?colon # Called at start of :
state @ if ." Already compiling -- maybe missing ;" nl reset fi ;

: ?tag # Check tags for control structure
depth 2 >= if <> else 1 fi if ." Bad nesting" nl reset fi ;

names
