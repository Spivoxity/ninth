: # 10 bp @ scan pop ;
# Now we can write comments like this

: ' word create ;

: tok+ 2 + ;
: cells 4 * ;
: MEM+ MEM + ;

: immediate over cells MEM+ @ tok+ dup tok@ 1 or swap tok! ;
' immediate 0 immediate pop pop
' # 0 immediate pop pop

# Stack manipulations
: -rot rot rot ;
: 2pop pop pop ;
: 2dup over over ;

# Abbreviations
: invert -1 xor ;
: 1- 1 - ;
: 2/ 1 asr ;
: 4/ 2 asr ;
: cell 4 ;
: cell+ 4 + ;
: cell- 4 - ;
: toks 2 * ;
: uxth 16 lsl 16 lsr ;
: space 32 putc ;
: aligned 1- tuck + swap invert and ;
: on 1 swap ! ;
: off 0 swap ! ;
: not 0 = ;
: > swap < ;
: <= swap < not ;
: >= < not ;
: != = not ;
: nl 10 putc ;
: inc dup @ 1+ swap ! ;
: dec dup @ 1- swap ! ;
: 0< 0 < ;
: negate 0 swap - ;
: fnegate 0.0 swap f- ;

# : xchg # Exchange between stack and memory
# dup @ -rot ! ;

# Quotations
: ['] immediate lit lit gentok ' gentok ;
: [compile] immediate ' gentok ;
: quote immediate [compile] ['] ['] gentok gentok ;
: [lit] quote lit gentok ;

# Storage allocation
: here dp @ ;
: align dp @ cell aligned dp ! ;
: gentok here dup tok+ dp ! tok! ;
: , here dup cell+ dp ! ! ;
: constant ' align CONST rot defword ;
: variable ' align CONST here defword ;
: allot here + dp ! ;

# Dictionary layout
: getdef cells MEM+ @ ;
: tok>next   getdef tok@ ;
: tok>flags  getdef 2 + tok@ ;
: tok>action getdef 4 + @ ;
: tok>data   getdef 8 + @ ;
: tok>name   getdef 12 + ;

: (is) swap dup tok>action swap tok>data defword ;
: is ' (is) ;

# Control structures

# Label values are relative to defbase to allow for the earth moving
: origin defbase @ ;
: offset here origin - ;

: branch0> quote branch0 offset 0 gentok ;
: branch> quote branch offset 0 gentok ;
: >label offset over - 2/ 1- swap origin + tok! ;

: <branch quote branch offset - 2/ 1- gentok ;
: label< offset ;

: [?comp] immediate over [lit] quote ?comp ;
: [?tag] immediate ' [lit] quote ?tag ;

: if immediate
  [?comp]			# Use only in compile state
  branch0>			# Branch to else or end if test is false
  ['] if ;			# Push IF as tag for nesting checks

: else immediate
  [?tag] if 			# Check nesting
  branch> 			# Finish THEN part with branch to end
  swap >label			# Place label for ELSE part
  ['] if ;			# Push IF tag again

: fi immediate
  [?tag] if			# Check nesting
  >label ;			# Place exit label

# : ?dup dup if dup fi ;

: do immediate
  [?comp]			# Only in compile state
  label<			# Label for repeat
  -1			        # Dummy value for loop test
  ['] do ;			# Push DO as tag for nesting check

: while immediate
  [?tag] do 			# Check nesting
  pop branch0> 			# Pop dummy and replace with jump
  ['] do ;			# Push tag again

: od immediate
  [?tag] do			# Check nesting
  swap <branch			# Branch back to start
  dup 0 >= if			# Place ending label if needed
    >label else pop fi ;	

: for immediate [?comp]
  quote swap quote >r		# Push ending value on r-stack
  label<     	   		# Label at top
  quote dup quote r@ quote < branch0> # Go to end if finished
  quote >r     	       		# Push current value on r-stack
  locbase dup inc inc		# Adjust base for locals
  ['] for ;   	  		# Push syntax tag

: +repeat immediate
  [?tag] for			# Check syntax
  quote r> quote +		# Increment current value
  swap <branch	 		# Go back to top
  >label			# Label at bottom
  quote r> quote 2pop		# Pop stuff from stacks
  locbase dup dec dec ;		# Restore local base

: repeat immediate 1 [lit] [compile] +repeat ;
: i rp @ cell+ @ ;
: j rp @ 3 cells + @ ;

: (exit) r> pop ;
: exit immediate pop-locals quote (exit) ;

: dump depth do ?dup while dup pick . 1- od nl ;
: clear do depth while pop od ;
: spaces 0 for space repeat ;
: min 2dup < if pop else nip fi ;
: max 2dup < if nip else pop fi ;
: abs dup 0< if negate fi ;

# Strings
: char word ch@ ;
: [char] immediate [?comp] char [lit] ;
: strlen dup do dup ch@ while 1+ od swap - ;
: putstr do dup ch@ ?dup while putc 1+ od pop ;
: litstr r> dup tok+ swap tok@ over + >r ;
: puttok tok>name putstr ;

: " immediate
[?comp] quote litstr 0 gentok [char] " here scan 
strlen 1+ 2 aligned dup here 2 - tok! here + dp ! ;

: ." immediate [?comp] [compile] " quote putstr ;

# Reimplementation of scan
: scan # delim base
tuck do over inp @ ch@ dup 
  if tuck != fi # base delim p ch flag
while
  over ch! 1+ inp inc
od
pop 0 swap ch! pop inp @ dup ch@ if 1+ inp ! fi ;

# Reimplementation of immed?
: immed? tok>flags 1 and 0 != ;

: (hide) dup tok>flags 2 or swap getdef 2 + tok! ;
: hide ' (hide) ;

: hidden tok>flags 2 and 0 != ;

# Reimplementation of find to respect hidden flag
: find
  dict @
  do dup 0 >= while
    tuck dup
    hidden not if
      tok>name over strcmp not if
        pop 1 exit
      fi
    else pop fi 
    swap tok>next
  od
  pop 0 ;

: savestr # string -- : save string at HERE
  do dup ch@ dup here ch! dp inc while 1+ od pop ;

: isram # Test if address resides in RAM
  bp dp != if pop 1 else MEM - MEMSIZE u< fi ;

: clonedef
  align here swap
  dup @ , cell+ dup @ , cell+ dup @ , cell+ savestr ;

: dyndef # Get definition and make it dynamic
  cells MEM+ dup @ dup isram if
    nip
  else
    clonedef tuck swap !
  fi ;

# Reimplementation of defword
: defword		# word action data
  rot dyndef tuck	# action def data def
  8 + ! tuck 4 + !      # def
  12 + putstr ."  defined" nl ;

: header # name -- token
  # Allocate indirect pointer
  align bp @ dup cell + bp !
  dup here swap !
  MEM - 4/ swap

  # Lay out the definition
  dict @ gentok  # next
  0 gentok       # flags
  0 ,            # action
  0 ,            # data
  savestr        # name

  # Set dict
  dup dict ! ;

: moveblock # dest src nbytes -- assume 2-byte units
do dup while   
  2 - >r tuck r@ + tok@ # src dst x
  over r@ + tok! swap r>
od pop 2pop ;

# Reimplementation of create
: create
find not if 
  origin not if
    header
  else
    # The Earth moves ... hold very tight please!
    dup >r                              # Save name for later (: name)
    here origin - >r                    # Save b = Size of fragment
    strlen 1 + cell aligned 12 +	# Calc a = Size of header
    bp dp = if 4 + fi
    origin tuck + dup defbase !         # Reset origin (O O+a : b name)
    # Move code fragment from O to O+a
    over r@ moveblock                   # (O : b name)
    # Fake dp value and create header
    dp ! r> r> header swap              # (tok b)
    # Reset dp
    origin + dp !
  fi
fi ;

: isspace dup 32 <= swap 0 != and ;
: nonspace 32 > ;

# Reimplementation of word
: word
  # Skip initial spaces
  do inp @ ch@ isspace while inp inc od
  # Copy to the pad a sequence of non-spaces (possibly empty)
  pad do inp @ ch@ dup nonspace while
    over ch! 1+ inp inc od pop
  # Terminate with a null
  0 swap ch!
  # Skip one trailing space
  inp @ ch@ if inp inc fi
  # Return the string on the pad
  pad ;

# Fix ' to read a new line when needed
: ' do word dup ch@ 0 = while pop accept od create ;

# Local variables

: init-locals
  0 nlocals ! 0 locbase ! ;

: pop-locals
  nlocals @ ?dup if quote (pop-locals) gentok fi ;

: local? # tok --> index 1 if tok is a local variable, tok 0 if not
  >r nlocals @
  do ?dup while
    1- dup toks locvar + tok@ r@ = if
      r> pop locbase @ + 1 exit
    fi
  od
  r> 0 ;

: genword
  local? if quote (get-local) gentok else gentok fi ;

: error ." Error: " ;

: -> immediate [?comp]
  ' local? if
    quote (set-local) gentok
  else
    error puttok ." is not a local variable" nl quit
  fi ;

: { immediate [?comp]
  do ' dup ['] } != while locvar nlocals @ toks + ! nlocals inc od pop
  quote (locals) nlocals @ gentok ;


# Disassembler
: names 
dict @ do dup 0 >= while dup space puttok tok>next od pop nl ;

: isword # Test if token is in the dictionary
dict @ do dup 0 >= while 2dup = if 2pop 1 exit fi tok>next od 2pop 0 ;

: seestr dup tok@ swap tok+ tuck + swap putstr ;

: seeword # Disassemble word and advance pointer
  dup tok@
  dup ['] litstr = if 
    pop [char] " putc space tok+ seestr [char] " putc space
  else
    dup ['] lit = if 
      pop ." #" tok+ dup tok@ .
    else dup ['] lit2 = if
      pop ." ##" tok+ dup tok@ uxth swap tok+ tuck tok@ 16 lsl + .
    else dup ['] branch = over ['] branch0 = or
        over ['] (locals) = or over ['] (get-local) = or
        over ['] (set-local) = or over ['] (pop-locals) = or if
      puttok [char] : putc tok+ dup tok@ .
    else dup isword if 
      puttok space
    else . fi fi fi fi
    tok+ 
  fi ;

: seebody 
do dup tok@ ['] e_n_d != while seeword od nl pop ;

: see # Disassemble up to e_n_d token
word find if
  dup tok>action ENTER = if
    tok>data seebody
  else
    puttok ."  has no mortal body" nl
  fi
else
  putstr ."  is unknown" nl
fi ;


# Top level

: banner ." NINTH (" MEMSIZE MEM+ here - . ." bytes free)" nl ;

: toplevel
  0 state !
  do accept inp @ while repl od ;

: readfile
  dup ." [Reading " putstr ." ]" nl
  redirect toplevel ;

: reset # Delete any half-complete definition
  origin if origin dp ! 0 defbase ! fi ;

: main
  reset
  do
    phase @ 0 = if
      -1 phase !  # Any quit will terminate the run
      args @ cell+ do dup @ ?dup while readfile cell+ od pop
      1 phase !
    else phase @ 1 = if
      banner toplevel nl ." Bye" nl exit
    else
      ." [Aborted]" nl exit
    fi fi
  od ;

: unknown # Unknown word in outer interpreter
error putstr ."  is undefined" nl quit ;

: ?comp # Called from compile-only words via [?comp]
state @ if pop else
  error puttok ."  is a compile-only word" nl quit 
fi ;

: ?colon # Called at start of :
state @ if error ." already in compile state -- maybe missing ;" nl fi ;

: ?tag # Check tags for control structure
depth 2 >= if != else 1 fi if error ." bad nesting" nl quit fi ;

names
