: # 10 dp @ scan pop ;
# Now we can write comments like this

: ' word create ;

: tok+ 2 + ;
: cells 4 * ;
: MEM+ MEM + ;

: immediate over cells MEM+ @ tok+ dup tok@ 1 or swap tok! ;
' immediate 0 immediate pop pop
' # 0 immediate pop pop

# Stack manipulations
: -rot rot rot ;
: 2pop pop pop ;
: 2dup over over ;
: rpop r> r> pop >r ;

# Abbreviations
: invert -1 xor ;
: 2/ 1 asr ;
: 4/ 2 asr ;
: cell 4 ;
: cell+ 4 + ;
: cell- 4 - ;
: tok 2 ;
: toks 2 * ;
: uxth 16 lsl 16 lsr ;
: space 32 putc ;
: aligned 1- tuck + swap invert and ;
: on 1 swap ! ;
: off 0 swap ! ;
: not 0 = ;
: > swap < ;
: <= swap < not ;
: >= < not ;
: != = not ;
: u> swap u< ;
: nl 10 putc ;
: negate 0 swap - ;
: inc dup @ 1+ swap ! ;
: dec dup @ 1- swap ! ;
: incr over @ + swap ! ;
: decr negate incr ;
: 0< 0 < ;
: fnegate 0.0 swap f- ;

# : xchg # Exchange between stack and memory
# dup @ -rot ! ;

# Quotations
: ['] immediate (lit) (lit) gentok ' gentok ;
: [compile] immediate ' gentok ;
: quote immediate [compile] ['] ['] gentok gentok ;
: [lit] quote (lit) gentok ;

# Storage allocation
# When bootstrapping, HERE is the location of DP in the ROM, and THERE
# refers to BP in the RAM.  After booting, they are the same, and BP
# is an alias for DP.
: here dp @ ;
: there bp @ ;
: gentok here dup tok+ dp ! tok! ;
: , here dup cell+ dp ! ! ;
: constant ' CONST rot defword ;
: variable ' bp @ cell aligned bp ! VAR there defword ;
: allot there + bp ! ;

# Dictionary layout
: getdef cells MEM+ @ ;
: tok>next   getdef tok@ ;
: tok>flags  getdef 2 + tok@ ;
: tok>action getdef 4 + @ ;
: tok>data   getdef 8 + @ ;
: tok>name   getdef 12 + ;

: (is) swap dup tok>action swap tok>data defword ;
: is ' (is) ;

# Control structures

# Label values are relative to defbase to allow for the earth moving
: origin defbase @ ;
: offset here origin - ;

: branch0> quote (branch0) offset 0 gentok ;
: branch> quote (branch) offset 0 gentok ;
: >label offset over - 2/ 1- swap origin + tok! ;

: <branch quote (branch) offset - 2/ 1- gentok ;
: label< offset ;

: [?comp] immediate over [lit] quote ?comp ;
: [?tag] immediate ' [lit] quote ?tag ;

: if immediate
  [?comp]			# Use only in compile state
  branch0>			# Branch to else or end if test is false
  ['] if ;			# Push IF as tag for nesting checks

: else immediate
  [?tag] if 			# Check nesting
  branch> 			# Finish THEN part with branch to end
  swap >label			# Place label for ELSE part
  ['] if ;			# Push IF tag again

: fi immediate
  [?tag] if			# Check nesting
  >label ;			# Place exit label

# : ?dup dup if dup fi ;

: do immediate
  [?comp]			# Only in compile state
  label<			# Label for repeat
  -1			        # Dummy value for loop test
  ['] do ;			# Push DO as tag for nesting check

: while immediate
  [?tag] do 			# Check nesting
  pop branch0> 			# Pop dummy and replace with jump
  ['] do ;			# Push tag again

: od immediate
  [?tag] do			# Check nesting
  swap <branch			# Branch back to start
  dup 0 >= if			# Place ending label if needed
    >label else pop fi ;	

: (exit) rpop ;
: exit immediate pop-locals quote (exit) ;

: dump depth do ?dup while dup pick . 1- od nl ;
: clear do depth while pop od ;
: min 2dup < if pop else nip fi ;
: max 2dup < if nip else pop fi ;
: abs dup 0< if negate fi ;


# Strings

: char word ch@ ;
: [char] immediate [?comp] char [lit] ;
: strlen dup do dup ch@ while 1+ od swap - ;
: putstr do dup ch@ ?dup while putc 1+ od pop ;
: (litstr) r> dup tok+ swap tok@ over + >r ;
: puttok tok>name putstr ;

: " immediate
  [?comp] quote (litstr) 0 gentok [char] " here scan 
  strlen 1+ 2 aligned dup here 2 - tok! here + dp ! ;

: ." immediate [?comp] [compile] " quote putstr ;

# Reimplementation of scan
: scan # delim base
tuck do over inp @ ch@ dup 
  if tuck != fi # base delim p ch flag
while
  over ch! 1+ inp inc
od
pop 0 swap ch! pop inp @ dup ch@ if 1+ inp ! fi ;

: savestr # string -- : save string at HERE
  do dup ch@ dup here ch! dp inc while 1+ od pop ;

: isram # Test if address resides in RAM
  bp dp != if pop 1 else MEM - MEMSIZE u< fi ;

: align do dp @ 3 and while 0 dp @ ch! dp inc od ;

: clonedef
  align here swap
  dup @ , cell+ dup @ , cell+ dup @ , cell+ savestr ;

: dyndef # Get definition and make it dynamic
  cells MEM+ dup @ dup isram if
    nip
  else
    clonedef tuck swap !
  fi ;

# Reimplementation of defword
: defword		# word action data
  rot dyndef tuck	# action def data def
  8 + ! tuck 4 + !      # def
  12 + putstr ."  defined" nl ;

: header # name -- token
  # Allocate indirect pointer
  align there dup cell + bp !
  dup here swap !
  MEM - 4/ swap

  # Lay out the definition
  dict @ gentok  # next
  0 gentok       # flags
  UNKNOWN ,      # action
  0 ,            # data
  savestr        # name

  # Set dict
  dup dict ! ;

: moveblock # dest src nbytes -- assume 2-byte units
do dup while   
  2 - >r tuck r@ + tok@ # src dst x
  over r@ + tok! swap r>
od pop 2pop ;

# Reimplementation of create
: create
find not if 
  origin not if
    header
  else
    # The Earth moves ... hold very tight please!
    dup >r                              # Save name for later (: name)
    here origin - >r                    # Save b = Size of fragment
    strlen 1 + cell aligned 12 +	# Calc a = Size of header
    bp dp = if 4 + fi
    origin tuck + dup defbase !         # Reset origin (O O+a : b name)
    # Move code fragment from O to O+a
    over r@ moveblock                   # (O : b name)
    # Fake dp value and create header
    dp ! r> r> header swap              # (tok b)
    # Reset dp
    origin + dp !
  fi
fi ;

: isspace dup 32 <= swap 0 != and ;
: nonspace 32 > ;

# Reimplementation of word
: word
  # Skip initial spaces
  do inp @ ch@ isspace while inp inc od
  # Copy to the pad a sequence of non-spaces (possibly empty)
  pad do inp @ ch@ dup nonspace while
    over ch! 1+ inp inc od pop
  # Terminate with a null
  0 swap ch!
  # Skip one trailing space
  inp @ ch@ if inp inc fi
  # Return the string on the pad
  pad ;

# Fix ' to read a new line when needed
: ' do word dup ch@ 0 = while pop accept od create ;

# Local variables

variable locbase cell allot
variable locvar 32 toks allot
variable nlocals cell allot

: init-locals
  0 nlocals ! 0 locbase ! ;

: pop-locals
  nlocals @ ?dup if quote (pop-locals) gentok fi ;

: local? # tok --> offset 1 if tok is a local variable, tok 0 if not
  >r locvar nlocals @ 2 * toks +
  do dup locvar u> while
    2 toks - dup tok@ r@ = if
      rpop tok+ tok@ locbase @ + 1 exit
    fi
  od
  pop r> 0 ;

: genword
  local? if quote (get-local) gentok else gentok fi ;

: error ." Error: " ;

: -> immediate [?comp]
  ' local? if
    quote (set-local) gentok
  else
    error puttok ." is not a local variable" nl quit
  fi ;

: def-local # x n
  swap locvar nlocals @ 2 * toks + tuck tok! tok+ tok!
  nlocals inc ;

: { immediate [?comp]
  do ' dup ['] } != while
    nlocals @ def-local
  od pop
  quote (locals) nlocals @ gentok ;

# n TIMES ... REPEAT
: times immediate [?comp]
  label<
  quote dup quote 0 quote > branch0>
  quote >r
  locbase inc
  ['] times ;

: end-times
  quote r> quote 1-
  swap <branch
  >label quote pop
  locbase dec ;

# hi lo FOR i ... REPEAT
: for immediate [?comp]
  quote swap quote >r		# Push ending value on r-stack
  label<     	   		# Label at top
  quote dup quote r@ quote < branch0> # Go to end if finished
  quote >r     	       		# Push current value on r-stack
  locbase 2 incr		# Adjust base for locals
  ' locbase @ negate def-local  # Create controlled variable
  ['] for ;   	  		# Push syntax tag

: +repeat immediate
  [?tag] for			# Check syntax
  quote r> quote +		# Increment current value
  swap <branch	 		# Go back to top
  >label			# Label at bottom
  quote rpop quote pop		# Pop stuff from stacks
  nlocals dec locbase 2 decr ;	# Restore locals

: repeat immediate
  dup ['] times = if pop end-times else quote 1 [compile] +repeat fi ;

: spaces times space repeat ;

# x CASE 1 => 11 | 2 => 22 | 33 ESAC
: case immediate
  quote >r 
  locbase inc
  0 ['] case ;
: => immediate [?tag] case
  quote r@ quote = branch0>
  ['] => ;
: | immediate [?tag] =>
  branch> swap >label swap 1+ 
  ['] case ;
: esac immediate
  # Handle missing default case
  dup ['] => = if pop >label else [?tag] case fi
  times >label repeat quote rpop
  locbase dec ;


# Token attributes

1 constant IMMED
2 constant HIDDEN
4 constant HASARG

: attr? swap tok>flags and 0 != ;

: set-attr over tok>flags or swap getdef 2 + tok! ;

: hide ' HIDDEN set-attr ;

# Reimplementation of immed?
: immed? IMMED attr? ;

# Reimplementation of find to respect hidden flag
: find
  dict @
  do dup 0 >= while
    tuck dup
    HIDDEN attr? not if
      tok>name over strcmp not if
        pop 1 exit
      fi
    else pop fi 
    swap tok>next
  od
  pop 0 ;


# Disassembler

: names 
dict @ do dup 0 >= while dup space puttok tok>next od pop nl ;

: isword # Test if token is in the dictionary
dict @ do dup 0 >= while 2dup = if 2pop 1 exit fi tok>next od 2pop 0 ;

: seestr dup tok@ swap tok+ tuck + swap putstr ;

' (branch) HASARG set-attr
' (branch0) HASARG set-attr
' (locals) HASARG set-attr
' (get-local) HASARG set-attr
' (set-local) HASARG set-attr
' (pop-locals) HASARG set-attr

: seeword # Disassemble word and advance pointer
  dup tok@
  dup ['] (litstr) = if 
    pop [char] " putc space tok+ seestr [char] " putc space
  else
    dup ['] (lit) = if 
      pop ." #" tok+ dup tok@ .
    else dup ['] (lit2) = if
      pop ." ##" tok+ dup tok@ uxth swap tok+ tuck tok@ 16 lsl + .
    else dup HASARG attr? if
      puttok ." :" tok+ dup tok@ .
    else dup isword if 
      puttok space
    else . fi fi fi fi
    tok+ 
  fi ;

: seebody 
do dup tok@ ['] e_n_d != while seeword od nl pop ;

: see # Disassemble up to e_n_d token
word find if
  dup tok>action ENTER = if
    tok>data seebody
  else
    puttok ."  has no mortal body" nl
  fi
else
  putstr ."  is unknown" nl
fi ;


# Top level

: banner ." NINTH (" MEMSIZE MEM+ here - . ." bytes free)" nl ;

: toplevel
  0 state !
  do accept inp @ while repl od ;

: readfile
  dup ." [Reading " putstr ." ]" nl
  redirect toplevel ;

: reset # Delete any half-complete definition
  origin if origin dp ! 0 defbase ! fi ;

variable phase cell allot 0 phase !

: main
  reset
  do 
    phase @ 0 = if
      99 phase !  # Any quit will terminate the run
      args @ cell+ do dup @ ?dup while readfile cell+ od pop
      1 phase !
    else phase @ 1 = if
      banner interactive on toplevel nl ." Bye" nl (done)
    else
      ." [Aborted]" nl (done)
    fi fi
  od ;

: unknown 
  error putstr ."  is undefined" nl quit ;

: ?comp # Called from compile-only words via [?comp]
state @ if pop else
  error puttok ."  is a compile-only word" nl quit 
fi ;

: ?colon # Called at start of :
state @ if error ." already in compile state -- maybe missing ;" nl fi ;

: ?tag # Check tags for control structure
depth 2 >= if != else 1 fi if error ." bad nesting" nl quit fi ;


# Tracing

variable t-loc cell allot
variable t-base cell allot
variable t-tmp cell allot

: t-dump nl depth 5 min do ?dup while dup pick . 1- od ." : " ;

: t-gettok t-loc @ tok@ t-loc tok incr ;
: t-dobranch toks t-loc swap incr ;
  
: t-lit t-dump t-gettok dup . ;
: t-lit2 t-dump t-gettok uxth t-gettok 16 lsl + dup . ;
: t-branch0 t-dump ." IF" t-gettok swap if pop else t-dobranch fi ;
: t-branch t-gettok t-dobranch ;

: t-locals t-dump ." (locals):"
  r> t-gettok dup .      # (x1 x2 ... xn ra n :)
  do ?dup while          # (x1 x2 ... x[k] ra k : x[k+1] ... x[n])
    rot                  # (x1 x2 ... ra k x[k] : x[k+1] ... x[n])
    >r 1-                # (x1 x2 ... ra k-1 : x[k] x[k+1] ... x[n])
  od                     # (ra : x1 ... xn)
  >r ;                   # (: ra x1 ... xn)

: t-getlocal t-dump ." (get-local):" t-gettok dup . 1 + cells rp @ + @ ;
: t-setlocal t-dump ." (set-local):" t-gettok dup . 1 + cells rp @ + ! ;
: t-poplocals t-dump ." (pop-locals):" r> t-gettok dup . cells rp @ + rp ! >r ;

: t-enter
  >r t-dump r> dup puttok space ." [ "
  r> swap t-loc @ >r tok>data t-loc ! >r ;

: t-exec
  # Hide the token on the r-stack while we dump the stack.
  >r t-dump r> dup puttok space
  # Then hide our return address in t-tmp while we execute the token,
  # in case it looks at the r-stack.
  r> t-tmp ! execute t-tmp @ >r ;

: t-trace
  tok>data t-loc ! rp @ t-base ! 
  do
    t-gettok ?dup if
      case ['] (lit) => ['] t-lit
        | ['] (lit2) => ['] t-lit2
        | ['] (branch) => ['] t-branch
        | ['] (branch0) => ['] t-branch0
        | ['] (locals) => ['] t-locals
        | ['] (get-local) => ['] t-getlocal
        | ['] (set-local) => ['] t-setlocal
        | ['] (pop-locals) => ['] t-poplocals
        | r@ dup tok>action ENTER = if ['] t-enter else ['] t-exec fi
      esac execute
    else rp @ t-base @ < if
      ." ] " r> t-loc !
    else
      t-dump ." Done" nl exit
    fi fi
  od ;

: trace
  ' dup tok>action ENTER != if
    dup ." (" puttok ."  is not traceable) " execute
  else
    ." Tracing " dup puttok ." ... " t-trace
  fi ;


names
